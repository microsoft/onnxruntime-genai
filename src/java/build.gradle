plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'jacoco'
	id "com.diffplug.spotless" version "6.25.0"
}

allprojects {
	repositories {
		mavenCentral()
	}
}

project.group = "com.microsoft.onnxruntime"
version = rootProject.file('../../VERSION_INFO').text.trim()

// cmake runs will inform us of the build directory of the current run
def cmakeBuildDir = System.properties['cmakeBuildDir']
def useCUDA = System.properties['USE_CUDA']
def cmakeJavaDir = "${cmakeBuildDir}"
def cmakeNativeLibDir = System.properties['nativeLibDir']
def cmakeBuildOutputDir = "${cmakeJavaDir}/build"

def mavenUser = System.properties['mavenUser']
def mavenPwd = System.properties['mavenPwd']
def mavenArtifactId = useCUDA == null ? project.name : project.name + "_gpu"

def defaultDescription = 'ONNX Runtime GenAI is <TODO>'

logger.lifecycle("cmakeBuildDir:${cmakeBuildDir}")
logger.lifecycle("cmakeNativeLibDir:${cmakeNativeLibDir}")

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

// This jar tasks serves as a CMAKE signalling
// mechanism. The jar will be overwritten by allJar task
jar {
}

// Add explicit sources jar with pom file.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "sources"
	from sourceSets.main.allSource
	into("META-INF/maven/$project.group/$mavenArtifactId") {
		from { generatePomFileForMavenPublication }
		rename ".*", "pom.xml"
	}
}

// Add explicit javadoc jar with pom file
task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = "javadoc"
	from javadoc.destinationDir
	into("META-INF/maven/$project.group/$mavenArtifactId") {
		from { generatePomFileForMavenPublication }
		rename ".*", "pom.xml"
	}
}

spotless {
	java {
		removeUnusedImports()
		googleJavaFormat()
	}
	format 'gradle', {
		target '**/*.gradle'
		trimTrailingWhitespace()
		indentWithTabs()

	}
}

compileJava {
	dependsOn spotlessJava
	options.compilerArgs += ["-h", "${project.buildDir}/headers/"]
	if (!JavaVersion.current().isJava8()) {
		// Ensures only methods present in Java 8 are used
		options.compilerArgs.addAll(['--release', '8'])
		// Gradle versions before 6.6 require that these flags are unset when using "-release"
		java.sourceCompatibility = null
		java.targetCompatibility = null
	}
}

compileTestJava {
	if (!JavaVersion.current().isJava8()) {
		// Ensures only methods present in Java 8 are used
		options.compilerArgs.addAll(['--release', '8'])
		// Gradle versions before 6.6 require that these flags are unset when using "-release"
		java.sourceCompatibility = null
		java.targetCompatibility = null
	}
}

sourceSets.main.java {
	srcDirs = ['src/main/java', 'src/main/jvm']
}

// expects
sourceSets.test {
	// add test resource files
	resources.srcDirs += [
		"../../test/test_models"
	]

	if (cmakeNativeLibDir != null) {
		// add compiled native libs
		resources.srcDirs += [cmakeNativeLibDir]
	}
}

if (cmakeNativeLibDir != null) {
	// generate tasks to be called from cmake

	// Overwrite jar location
	task allJar(type: Jar) {
		manifest {
			attributes('Automatic-Module-Name': "com.microsoft.onnxruntime.genai",
					'Implementation-Title': 'onnxruntime-genai',
					'Implementation-Version': project.version)
		}
		into("META-INF/maven/$project.group/$mavenArtifactId") {
			from { generatePomFileForMavenPublication }
			rename ".*", "pom.xml"
		}
		from sourceSets.main.output
		from cmakeNativeLibDir
	}

	task cmakeBuild(type: Copy) {
		from project.buildDir
		include 'libs/**'
		include 'docs/**'
		into cmakeBuildOutputDir
	}

	cmakeBuild.dependsOn allJar
	cmakeBuild.dependsOn sourcesJar
	cmakeBuild.dependsOn javadocJar
	cmakeBuild.dependsOn javadoc

	task cmakeCheck(type: Copy) {
		from project.buildDir
		include 'reports/**'
		into cmakeBuildOutputDir
	}
	cmakeCheck.dependsOn check
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

processTestResources {
	duplicatesStrategy(DuplicatesStrategy.INCLUDE) // allows duplicates in the test resources
}

test {
	java {
		dependsOn spotlessJava
	}
	useJUnitPlatform()
	if (cmakeBuildDir != null) {
		workingDir cmakeBuildDir
	}

	systemProperty "java.library.path", cmakeNativeLibDir
	systemProperties System.getProperties().subMap(['USE_CUDA'])
	testLogging {
		events "passed", "skipped", "failed"
		showStandardStreams = true
		showStackTraces = true
		exceptionFormat = "full"
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.destination file("${buildDir}/jacocoHtml")
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = project.group
			artifactId = mavenArtifactId

			from components.java
			pom {
				name = 'onnxruntime-genai'
				description = defaultDescription
				// TODO: Setup https://microsoft.github.io/onnxruntime-genai/ for equivalence with ORT?
				url = 'https://github.com/microsoft/onnxruntime-genai/'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://opensource.org/licenses/MIT'
					}
				}
				organization {
					name = 'Microsoft'
					url = 'https://www.microsoft.com'
				}
				scm {
					connection = 'scm:git:git://github.com:microsoft/onnxruntime-genai.git'
					developerConnection = 'scm:git:ssh://github.com/microsoft/onnxruntime-genai.git'
					url = 'https://github.com/microsoft/onnxruntime-genai'
				}
				developers {
					// TODO: Does this need updating?
					developer {
						id = 'onnxruntime'
						name = 'ONNX Runtime'
						email = 'onnxruntime@microsoft.com'
					}
				}
			}
		}
	}
	repositories {
		maven {
			url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
			credentials {
				username mavenUser
				password mavenPwd
			}
		}
	}
}

// Generates a task signMavenPublication that will
// build all artifacts.
signing {
	// Queries env vars:
	// ORG_GRADLE_PROJECT_signingKey
	// ORG_GRADLE_PROJECT_signingPassword but can be changed to properties
	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.maven
}
