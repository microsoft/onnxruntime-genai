from setuptools import setup, find_packages
from setuptools.dist import Distribution
import sys
from os import path

if sys.version_info < (3, 0):
    sys.exit('Sorry, Python < 3.0 is not supported')

class BinaryDistribution(Distribution):
    """Distribution which always forces a binary package with platform name"""
    def has_ext_modules(foo):
        return True

long_description_file = './package_description.md'

if not path.exists(long_description_file):
    raise FileNotFoundError(f'Unable to find {long_description_file} file')
with open(long_description_file, encoding="utf-8") as fdesc:
    long_description = fdesc.read()

onnxruntime_dependency = None
name = '@TARGET_NAME@'
if name == 'onnxruntime-genai':
    onnxruntime_dependency = 'onnxruntime'
elif name == 'onnxruntime-genai-cuda':
    onnxruntime_dependency = 'onnxruntime-gpu'
elif name.endswith('-directml'):
    onnxruntime_dependency = 'onnxruntime-directml'
elif name.endswith('-rocm'):
    onnxruntime_dependency = 'onnxruntime-rocm'
else:
    sys.exit(f'onnxruntime dependency package for {name} not known. Please configure the onnxruntime dependency.')

extras = ["ThirdPartyNotices.txt", "LICENSE"]

setup(
    name=name,
    version='@VERSION_INFO@',
    description='ONNX Runtime generate() API',
    long_description=long_description,
    long_description_content_type='text/markdown',
    packages=['onnxruntime_genai', 'onnxruntime_genai.models'],
    include_package_data=True,
    package_data={'': ['*.pyd', '*.dll', '*.so*'] + extras},
    install_requires=[
        'numpy<2',
        onnxruntime_dependency
    ],
    distclass=BinaryDistribution,
    author="Microsoft Corporation",
    author_email="onnxruntime-genai@microsoft.com",
    license="MIT License",
)
