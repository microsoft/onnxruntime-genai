from setuptools import setup, find_packages
from setuptools.dist import Distribution
import sys
from os import path

if sys.version_info < (3, 0):
    sys.exit('Sorry, Python < 3.0 is not supported')

class BinaryDistribution(Distribution):
    """Distribution which always forces a binary package with platform name"""
    def has_ext_modules(foo):
        return True

long_description_file = './package_description.md'

if not path.exists(long_description_file):
    raise FileNotFoundError(f'Unable to find {long_description_file} file')
with open(long_description_file, encoding="utf-8") as fdesc:
    long_description = fdesc.read()

extras = ["ThirdPartyNotices.txt", "LICENSE"]
package_name = '@TARGET_NAME@'


def _onnxruntime_dependency() -> str:
    dependency = None
    if package_name == "onnxruntime-genai":
        dependency = "onnxruntime"
    elif package_name == "onnxruntime-genai-cuda":
        dependency = "onnxruntime-gpu"
    elif package_name == "onnxruntime-genai-directml":
        dependency = "onnxruntime-directml"
    elif package_name == "onnxruntime-genai-rocm":
        dependency = "onnxruntime-rocm"
    else:
        raise ValueError(f'Unable to determine the onnxruntime dependency for {package_name}.')

    return dependency


setup(
    name=package_name,
    version='@VERSION_INFO@',
    description='ONNX Runtime generate() API',
    long_description=long_description,
    long_description_content_type='text/markdown',
    packages=['onnxruntime_genai', 'onnxruntime_genai.models'],
    include_package_data=True,
    package_data={'': ['*.pyd', '*.dll', '*.so*'] + extras},
    install_requires=[
        'numpy<2',
        # _onnxruntime_dependency(), # Uncomment this when the onnxruntime stable release contains the ort shared lib
    ],
    distclass=BinaryDistribution,
    author="Microsoft Corporation",
    author_email="onnxruntime-genai@microsoft.com",
    license="MIT License",
)
