parameters:
  arch: 'x64'
jobs:
- job: Windows_CPU_Wheels
  pool: 'onnxruntime-Win-CPU-2022'
  strategy:
    matrix:
      Python38_x64:
        PythonVersion: '3.8'
        buildArch: ${{ parameters.arch }}
      Python39_x64:
        PythonVersion: '3.9'
        buildArch: ${{ parameters.arch }}
      Python310_x64:
        PythonVersion: '3.10'
        buildArch: ${{ parameters.arch }}
      Python311_x64:
        PythonVersion: '3.11'
        buildArch: ${{ parameters.arch }}
      Python312_x64:
        PythonVersion: '3.12'
        buildArch: ${{ parameters.arch }}
  variables:
    BuildConfig: 'RelWithDebInfo'
  timeoutInMinutes: 180
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PythonVersion)
      addToPath: true
      architecture: $(buildArch)
  - task: onebranch.pipeline.tsaoptions@1
    displayName: 'OneBranch TSAOptions'
    inputs:
      tsaConfigFilePath: '$(Build.SourcesDirectory)\.config\tsaoptions.json'
      appendSourceBranchName: false

  - template: steps/set-nightly-build-option-variable-step.yml

  - bash: |
      pip install -r scripts/requirements.txt
      python3 scripts/download_onnxruntime.py --ort_version 1.17.0
    displayName: Download OnnxRuntime
    workingDirectory: $(Build.SourcesDirectory)
  - bahs: |
      ls $(Build.SourcesDirectory)
      ls $(Build.SourcesDirectory)\ort
  - bash: |
      cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=$(BuildConfig) -DUSE_CUDA=OFF
      cmake --build build --config $(BuildConfig)  --parallel  --target python
    displayName: 'Build pybind with CMake'

  # Esrp signing
  - template: steps/win-esrp-dll-step.yml
    parameters:
      FolderPath: '$(Build.BinariesDirectory)\build\python\$(BuildConfig)\wheel\onnxruntime_genai'
      DisplayName: 'ESRP - Sign Native dlls'
      DoEsrp: true
      Pattern: '*.pyd,*.dll'

  - bash: |
      cmake --build build --config $(BuildConfig) --parallel --target PyPackageBuild
    displayName: 'Build Python Wheel'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)\wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai python wheel'
    inputs:
      ArtifactName: onnxruntime-genai

  - script: |
      7z x *.whl
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: 'unzip the package'

  - task: CredScan@3
    displayName: 'Run CredScan'
    inputs:
      debugMode: false
    continueOnError: true

  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '+:file|$(Build.ArtifactStagingDirectory)\**\*.dll;-:file|$(Build.ArtifactStagingDirectory)\**\DirectML.dll'
    continueOnError: true

  - task: TSAUpload@2
    displayName: 'TSA upload'
    condition: and(and (succeeded(), and(eq(variables['buildArch'], 'x64'), eq(variables['PythonVersion'], '3.8'))), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      GdnPublishTsaOnboard: false
      GdnPublishTsaConfigFile: '$(Build.sourcesDirectory)\.gdn\.gdntsa'
    continueOnError: true

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()