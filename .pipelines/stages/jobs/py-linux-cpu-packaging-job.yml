parameters:
  - name: arch
    type: string
    default: 'x64'
jobs:
- job: Linux_CPU_Wheels
  strategy:
    matrix:
      x64:
        buildArch: 'x64'
        machine_pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
        docker_arch: 'x64'
      ${{ if eq(parameters.arch, 'arm64') }}:
        arm64:
          buildArch: 'arm64'
          machine_pool: 'onnxruntime-linux-ARM64-CPU-2019'
          docker_arch: 'aarch64'
  timeoutInMinutes: 240
  workspace:
    clean: all
  pool: $(machine_pool)
  variables:
  # The build machine pool doesn't have dotnet, so it can't run CG.
  - name: skipComponentGovernanceDetection
    value: true
  - name: ort_version
    value: '1.17.0'

  steps:
  - checkout: self # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/onnxruntime-genai,
    clean: true
    submodules: recursive

  - checkout: manylinux # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/manylinux,
    submodules: false

  - template: steps/set-nightly-build-option-variable-step.yml


#  - bash: |
#      pip3 install -r requirements.txt
#      python3 download_onnxruntime.py --ort_version 1.17.0 --os linux --is_gpu False --arch $(buildArch)
#    displayName: Download OnnxRuntime
#    workingDirectory: $(Build.SourcesDirectory)/onnxruntime-genai/scripts

  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'GitHub - Release'
      userRepository: 'microsoft/onnxruntime'
      defaultVersionType: 'specificTag'
      version: 'v$(ort_version)'
      itemPattern: 'onnxruntime-linux-$(buildArch)-$(ort_version)*'
      downloadPath: '$(Build.SourcesDirectory)'
    displayName: Download ONNXRuntime
      -
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '**/*.tgz'
      destinationFolder: '$(Build.SourcesDirectory)/onnxruntime-genai'
      cleanDestinationFolder: false
      overwriteExistingFiles: true
    displayName: Unzip OnnxRuntime

  - bash: |
      mv  onnxruntime-linux-$(buildArch)-$(ort_version) ort
    displayName: Rename Onnxruntime to ort
    workingDirectory: '$(Build.SourcesDirectory)/onnxruntime-genai'

  - script: |
      set -e -x
      python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/manylinux/Dockerfile.manylinux2_28_cpu \
        --context tools/ci_build/github/linux/docker/manylinux \
        --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
        --container-registry onnxruntimebuildcache \
        --manylinux-src $(Build.SourcesDirectory)/manylinux \
        --multiple_repos \
        --repository onnxruntimecpubuild$(docker_arch)
    displayName: 'Get Docker Image'
    workingDirectory: '$(Build.SourcesDirectory)/onnxruntime-genai'

  - script: |
      set -e -x
      docker run \
      --rm \
      --volume $(Build.SourcesDirectory):/onnxruntime_src \
      -w /onnxruntime_src onnxruntimecpubuild$(docker_arch) bash -c "echo $PATH && /usr/bin/cmake --preset linux_gcc_cpu_release && /usr/bin/cmake --build --preset linux_gcc_cpu_release"
    displayName: 'Build Python Wheel'
    workingDirectory: '$(Build.SourcesDirectory)/onnxruntime-genai'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/onnxruntime-genai/build/gcc_cpu/release/wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime-genai-linux-cpu-$(buildArch)

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()