jobs:
- job: Windows_GPU_Wheels
  pool: 'onnxruntime-Win-CPU-2022'
  #  pool: 'onnxruntime-Win2022-GPU-A10'
  variables:
    BuildConfig: 'RelWithDebInfo'
    cuda_version: '12.2'
    cuda_dir: '$(Build.SourcesDirectory)\cuda_sdk'
    ort_version: '1.17.0'
    build_dir: win-${{ parameters.arch }}
  timeoutInMinutes: 180
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: onebranch.pipeline.tsaoptions@1
    displayName: 'OneBranch TSAOptions'
    inputs:
      tsaConfigFilePath: '$(Build.SourcesDirectory)\.config\tsaoptions.json'
      appendSourceBranchName: false

  - template: steps/set-nightly-build-option-variable-step.yml

  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'GitHub - Release'
      userRepository: 'microsoft/onnxruntime'
      defaultVersionType: 'specificTag'
      version: 'v$(ort_version)'
      itemPattern: 'onnxruntime-win-x64-gpu-$(ort_version).zip'
      downloadPath: '$(Build.SourcesDirectory)'
    displayName: Download ONNXRuntime
      -
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '**/*.zip'
      destinationFolder: '$(Build.SourcesDirectory)'
      cleanDestinationFolder: false
      overwriteExistingFiles: true
    displayName: Unzip OnnxRuntime

  - powershell: |
      Rename-Item -Path onnxruntime-win-x64-gpu-$(ort_version) -NewName ort
    displayName: Rename Onnxruntime to ort
    workingDirectory: '$(Build.SourcesDirectory)'

  - powershell: |
      Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse

  - powershell: |
      azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v$(cuda_version)" $(cuda_dir)
    displayName: 'Download CUDA'

  - powershell: |
      Get-ChildItem -Path $(cuda_dir) -Recurse
    displayName: 'Verify CUDA download'

  - powershell: |
      cmake -G "Visual Studio 17 2022" -A x64 -T cuda=$(cuda_dir)\v$(cuda_version) -DCMAKE_BUILD_TYPE=$(BuildConfig) -DUSE_CUDA=TRUE -S . -B $(build_dir)
      cmake --build $(build_dir) --config $(BuildConfig) --parallel --target onnxruntime-genai
    displayName: 'Build C++ with CMake'

  - bash:
      dotnet build Microsoft.ML.OnnxRuntimeGenAI.csproj -p:Configuration="$(BuildConfig)" -p:NativeBuildOutputDir="$(build_dir)\$(BuildConfig)"
    displayName: 'Build CSharp'
    workingDirectory: '$(Build.SourcesDirectory)\src\csharp'

  - powershell: |
      Get-ChildItem -Path $(Build.SourcesDirectory)\$(build_dir)\ -Recurse
  #   Esrp signing
  - template: steps/win-esrp-dll-step.yml
    parameters:
      FolderPath: '$(Build.SourcesDirectory)\$(build_dir)\$(BuildConfig)'
      DisplayName: 'ESRP - Sign Native dlls'
      DoEsrp: true
      Pattern: '*.dll'

  - powershell: |
      nuget.exe pack Microsoft.ML.OnnxRuntimeGenAI.nuspec -Prop version=0.1.0 -Prop id="Microsoft.ML.OnnxRuntimeGenAI.Gpu"
      nuget.exe pack Microsoft.ML.OnnxRuntimeGenAI.Managed.nuspec -Prop version=0.1.0 -Prop id="Microsoft.ML.OnnxRuntimeGenAI"
    displayName: 'Nuget Packaging'
    workingDirectory: '$(Build.SourcesDirectory)\nuget'

  - powershell: |
      Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse
  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\build\wheel\'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai python wheel'
    inputs:
      ArtifactName: onnxruntime-genai-win-gpu
#
#  - script: |
#      7z x *.whl
#    workingDirectory: '$(Build.ArtifactStagingDirectory)'
#    displayName: 'unzip the package'

  - task: CredScan@3
    displayName: 'Run CredScan'
    inputs:
      debugMode: false
    continueOnError: true

#  - task: BinSkim@4
#    displayName: 'Run BinSkim'
#    inputs:
#      AnalyzeTargetGlob: '+:file|$(Build.ArtifactStagingDirectory)\**\*genai.dll;-:file|$(Build.ArtifactStagingDirectory)\**\DirectML.dll'
#    continueOnError: true

  - task: TSAUpload@2
    displayName: 'TSA upload'
    condition: and(and (succeeded(), eq(variables['PythonVersion'], '3.8')), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      GdnPublishTsaOnboard: false
      GdnPublishTsaConfigFile: '$(Build.sourcesDirectory)\.gdn\.gdntsa'
    continueOnError: true

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
