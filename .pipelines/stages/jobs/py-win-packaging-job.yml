parameters:
- name: arch
  type: string
- name: ort_version
  type: string
- name: cuda_version
  type: string
  default: ''
- name: ep
  type: string
jobs:
- job: Windows_${{ parameters.ep }}_${{ parameters.arch }}_Wheels
  pool: 'onnxruntime-Win-CPU-2022'
  strategy:
    matrix:
      Python38_x64:
        PythonVersion: '3.8'
      Python39_x64:
        PythonVersion: '3.9'
      Python310_x64:
        PythonVersion: '3.10'
      Python311_x64:
        PythonVersion: '3.11'
      Python312_x64:
        PythonVersion: '3.12'
  timeoutInMinutes: 180
  variables:
  - name: ort_filename
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'onnxruntime-win-${{ parameters.arch }}-${{ parameters.ort_version }}'
    ${{ else}}:
      ${{if eq(parameters.cuda_version, '11.8') }}:
        value: 'onnxruntime-win-${{ parameters.arch }}-gpu-${{ parameters.ort_version }}'
      ${{ else }}:
        value: 'onnxruntime-win-${{ parameters.arch }}-cuda12-${{ parameters.ort_version }}'
  workspace:
    clean: all
  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PythonVersion)
      addToPath: true
      architecture: ${{ parameters.arch }}

  - task: PythonScript@0
    inputs:
      scriptSource: inline
      script: |
        import sys
        import subprocess
        subprocess.call(['pip', 'install', '-q', 'setuptools', 'wheel', 'build', 'packaging'])
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules'

  - powershell: |
      azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v${{ parameters.cuda_version }}" '$(Build.SourcesDirectory)\cuda_sdk'
    displayName: 'Download CUDA'
    condition: eq('${{ parameters.ep }}', 'cuda')
    workingDirectory: '$(Build.SourcesDirectory)'

  - template: steps/win-build-step.yml
    parameters:
      arch: ${{ parameters.arch }}
      cuda_version: ${{ parameters.cuda_version }}
      ep: ${{ parameters.ep }}
      ort_filename: $(ort_filename)
      ort_version: ${{ parameters.ort_version }}
      target: 'python'

  - template: steps/win-esrp-dll-step.yml
    parameters:
      FolderPath: '$(Build.SourcesDirectory)\build\release\${{ parameters.ep }}_default\wheel\onnxruntime_genai'
      DisplayName: 'ESRP - PYD Sign'
      DoEsrp: true
      Pattern: '*.pyd'

  - powershell: |
      cmake --build --preset windows_${{ parameters.arch }}_${{ parameters.ep }}_release --parallel --PyPackageBuild
    displayName: 'Build Python Wheel'

  - powershell: |
      Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\build\release\${{ parameters.ep }}_default\wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai python wheel'
    inputs:
      ArtifactName: onnxruntime-genai-win-${{ parameters.ep }}-${{ parameters.arch }}

  - script: |
      7z x *.whl
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: 'unzip the package'

  - powershell: |
      Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Recurse
    displayName: 'Verify the package'

  - task: CredScan@3
    displayName: 'Run CredScan'
    inputs:
      debugMode: false
    continueOnError: true

  - task: TSAUpload@2
    displayName: 'TSA upload'
    condition: and(and (succeeded(), and(eq(variables['buildArch'], 'x64'), eq(variables['PythonVersion'], '3.8'))), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      GdnPublishTsaOnboard: false
      GdnPublishTsaConfigFile: '$(Build.sourcesDirectory)\.config\tsaoptions.json'
    continueOnError: true

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()