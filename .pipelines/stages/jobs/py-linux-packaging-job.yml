parameters:
- name: arch
  type: string
  default: 'x64'
- name: ort_version
  type: string
  default: '1.17.1'
- name: cuda_version
  type: string
  default: '11.8'
- name: ep
  type: string
  default: 'cpu'
  values:
  - 'cpu'
  - 'cuda'
jobs:
- job: Linux_${{ parameters.ep }}_Wheels
  strategy:
    matrix:
      x64:
        buildArch: 'x64'
        machine_pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
        docker_arch: 'x64'
      ${{ if eq(parameters.arch, 'arm64') }}:
        arm64:
          buildArch: 'arm64'
          machine_pool: 'onnxruntime-linux-ARM64-CPU-2019'
          docker_arch: 'aarch64'
  timeoutInMinutes: 240
  workspace:
    clean: all
  pool: $(machine_pool)
  variables:
  # The build machine pool doesn't have dotnet, so it can't run CG.
  - name: skipComponentGovernanceDetection
    value: true

  steps:
  - template: steps/linux-build-step.yml
    parameters:
      arch: ${{ parameters.arch }}
      ort_version: ${{ parameters.ort_version }}
      ep: ${{ parameters.ep }}
      cuda_version: ${{ parameters.cuda_version }}

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/onnxruntime-genai/build/gcc_${{ parameters.ep }}/release/wheel'
      Contents: '*manylinux*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime-genai-linux-${{ parameters.ep }}-$(buildArch)

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()