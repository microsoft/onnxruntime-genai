parameters:
- name: arch
  type: string
- name: ep
  type: string
- name: ort_version
  type: string
- name: cuda_version
  type: string
  default: ''

jobs:
- job: Linux_CAPI_Packaging_${{ parameters.arch }}_${{ parameters.ep }}
  pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
  timeoutInMinutes: 180
  variables:
  - name: genai_src
    value: '$(Build.SourcesDirectory)/onnxruntime-genai'
  - name: artifactName
    value: 'onnxruntime-genai-capi-linux-${{ parameters.ep }}-${{ parameters.arch }}'
  - name: ort_filename
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'onnxruntime-linux-${{ parameters.arch }}-${{ parameters.ort_version }}'
    ${{ else}}:
      ${{if eq(parameters.cuda_version, '11.8') }}:
        value: 'onnxruntime-linux-${{ parameters.arch }}-gpu-${{ parameters.ort_version }}'
      ${{ else }}:
        value: 'onnxruntime-linux-${{ parameters.arch }}-cuda12-${{ parameters.ort_version }}'
  workspace:
    clean: all
  steps:
  - template: steps/capi-linux-build-step.yml
    parameters:
      arch: ${{ parameters.arch }}
      ort_version: ${{ parameters.ort_version }}
      ep: ${{ parameters.ep }}
      ort_filename: $(ort_filename)

  - task: CopyFiles@2
    displayName: 'Copy Onnxruntime C API library files to ArtifactStagingDirectory'
    inputs:
      SourceFolder: '$(genai_src)/ort/lib'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)/lib'

  - task: CopyFiles@2
    displayName: 'Copy GenAi C API library files to ArtifactStagingDirectory'
    inputs:
      SourceFolder: '$(genai_src)/build/gcc_${{ parameters.ep }}/release'
      Contents: |
        onnxruntime-genai.so
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)/lib'

  - task: CopyFiles@2
    displayName: 'Copy GenAi C API header to ArtifactStagingDirectory'
    inputs:
      SourceFolder: '$(genai_src)/src'
      Contents: |
        ort_genai_c.h
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)/include'

  - task: CopyFiles@2
    displayName: 'Copy other files to ArtifactStagingDirectory'
    inputs:
      SourceFolder: '$(genai_src)'
      Contents: |
        VERSION_INFO
        LICENSE
        SECURITY.md
        README.md
        ThirdPartyNotices.txt
      TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/$(artifactName)'
      includeRootFolder: true
      archiveType: 'tar' # Options: zip, 7z, tar, wim      archiveType: 'tar' # Options: zip, 7z, tar, wim
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).tgz'
      replaceExistingArchive: true

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)'
      Contents: '*'
      RemoveSourceFolder: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai capi'
    inputs:
      ArtifactName: $(artifactName)

  - template: steps/compliant-and-cleanup-step.yml

