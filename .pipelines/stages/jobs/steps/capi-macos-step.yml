parameters:
- name: target
  type: string
- name: ep
  type: string
  default: 'cpu'
- name: arch
  type: string
  default: 'x64'
- name: build_config
  type: string
  default: 'release'

steps:

- checkout: self
  clean: true
  path: onnxruntime-genai
  submodules: recursive

- template: utils/set-nightly-build-option-variable.yml

- bash: |
    echo "arch=$(arch)"
    echo "ort_version=$(ort_version)"
    echo "ep=$(ep)"
    echo "cuda_version=$(cuda_version)"
    echo "target=${{ parameters.target }}"
    echo "build_config=${{ parameters.build_config }}"
  displayName: 'Print Parameters'

- bash: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    echo '##vso[task.prependpath]$HOME/.cargo/bin'
    source "$HOME/.cargo/env"
    rustup toolchain install 1.86.0
    rustup default 1.86.0
    rustup component add rust-src --toolchain 1.86.0
    rustup target add aarch64-apple-darwin --toolchain 1.86.0
    rustup target add x86_64-apple-darwin --toolchain 1.86.0
    rustup show active-toolchain
    export CFLAGS="-arch arm64"
    export CXXFLAGS="$CFLAGS"
    export MACOSX_DEPLOYMENT_TARGET=12.0
  displayName: 'Install Rust Toolchain'
  condition: eq(variables['arch'], 'x64')
  workingDirectory: '$(Build.Repository.LocalPath)'

- bash: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    echo '##vso[task.prependpath]$HOME/.cargo/bin'
    source "$HOME/.cargo/env"
    rustup toolchain install 1.86.0
    rustup default 1.86.0
    rustup component add rust-src --toolchain 1.86.0
    rustup target add aarch64-apple-darwin --toolchain 1.86.0
    rustup target add x86_64-apple-darwin --toolchain 1.86.0
    rustup show active-toolchain
    export CFLAGS="-arch arm64"
    export CXXFLAGS="$CFLAGS"
    export MACOSX_DEPLOYMENT_TARGET=12.0
    export CARGO_BUILD_TARGET=aarch64-apple-darwin
  displayName: 'Install Rust Toolchain'
  condition: eq(variables['arch'], 'arm64')
  workingDirectory: '$(Build.Repository.LocalPath)'

- bash: |
    brew update --quiet
    brew install llvm@18
    # Resolve the actual install prefix (/opt/homebrew or /usr/local)
    LLVM_PREFIX="$(brew --prefix llvm@18)"
    echo "Adding LLVM to PATH for subsequent tasksâ€¦"
    echo "##vso[task.prependpath]$LLVM_PREFIX/bin"
    export PATH="$LLVM_PREFIX/bin:$PATH"
    # tell build tools to prefer the freshly installed clang
    export CC="$LLVM_PREFIX/bin/clang"
    export CXX="$LLVM_PREFIX/bin/clang++"
    clang --version
    # Install Python wheel package
    python -m pip install --quiet wheel
  displayName: 'Install LLVM'
  workingDirectory: '$(Build.Repository.LocalPath)'


- powershell: |
    $env:MACOSX_DEPLOYMENT_TARGET = "12.0" # Monterey
    # $env:RUSTFLAGS='-C link-arg=-Wl,-undefined,dynamic_lookup -C link-arg=-Wl,-no_dead_strip_inits_and_terms'
    $env:CC="$LLVM_PREFIX/bin/clang"
    $env:CXX="$LLVM_PREFIX/bin/clang++"
    $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
    # Write-Host "##vso[task.setvariable variable=RUSTFLAGS]-C link-arg=-undefined -C link-arg=dynamic_lookup"
    $env:CARGO_BUILD_TARGET="aarch64-apple-darwin"
    cmake --preset macos_$(arch)_$(ep)_$(build_config)
  displayName: 'Configure CMake C API'
  workingDirectory: '$(Build.Repository.LocalPath)'

- powershell: |
    $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
    $env:CARGO_BUILD_TARGET="aarch64-apple-darwin"
    cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --parallel --target ${{ parameters.target }}
  displayName: 'Build C API'
  workingDirectory: '$(Build.Repository.LocalPath)'

- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - powershell: |
      python -m pip install wheel
    displayName: 'Install wheel'

  - powershell: |
      $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
      cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --target package
    displayName: 'Package C/C++ API'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - bash: |
      set -e -x
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      tar -xvzf onnxruntime-genai-*.tar.gz -C .
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec zip -FSr --symlinks {}.zip {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      rm -rf $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package/onnxruntime-genai-*.tar.gz
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec rm -rf {} +
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
    displayName: 'Convert from .tar.gz to .zip'
    workingDirectory: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

  - template: compliant/mac-esrp-archive-step.yml
    parameters:
      FolderPath: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'
      Pattern: '*.zip'

  - bash: |
      set -e -x
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -name 'onnxruntime-genai-*.zip' -exec unzip {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec tar -czvf {}.tar.gz {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      rm -rf $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package/onnxruntime-genai-*.zip
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec rm -rf {} +
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
    displayName: 'Convert from .zip to .tar.gz'
    workingDirectory: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

  - task: 1ES.PublishPipelineArtifact@1
    displayName: 'Publish Artifact: ONNXRuntime Genai capi'
    inputs:
      artifactName: $(artifactName)-capi
      targetPath: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

- ${{ if eq(parameters.target, 'python') }}:
  - powershell: |
      python -m pip install wheel
    displayName: 'Install wheel'

  - powershell: |
      $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
      # From: https://github.com/pypa/cibuildwheel/blob/93542c397cfe940bcbb8f1eff5c37d345ea16653/cibuildwheel/macos.py#L247-L260
      if ("$(arch)" -eq "arm64") {
          $env:_PYTHON_HOST_PLATFORM = "macosx-12.0-arm64"
          $env:ARCHFLAGS = "-arch arm64"
      }
      else {
          $env:_PYTHON_HOST_PLATFORM = "macosx-12.0-x86_64"
          $env:ARCHFLAGS = "-arch x86_64"
      }
      cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --parallel --PyPackageBuild
    displayName: 'Build Python Wheel'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - powershell: |
      Get-ChildItem -Path $(Build.Repository.LocalPath) -Recurse
    displayName: 'List all files in the repo for debugging'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/wheel'

  - task: 1ES.PublishPipelineArtifact@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      artifactName: $(artifactName)-$(PyNoDotVer)-wheel
      targetPath: '$(Build.ArtifactStagingDirectory)/wheel'
