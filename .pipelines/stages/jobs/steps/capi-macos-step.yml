parameters:
- name: target
  type: string
- name: ep
  type: string
  default: 'cpu'
- name: arch
  type: string
  default: 'x64'
- name: build_config
  type: string
  default: 'release'

steps:

- checkout: self
  clean: true
  path: onnxruntime-genai
  submodules: recursive

- template: utils/set-nightly-build-option-variable.yml

- bash: |
    echo "arch=$(arch)"
    echo "ort_version=$(ort_version)"
    echo "ep=$(ep)"
    echo "cuda_version=$(cuda_version)"
    echo "target=${{ parameters.target }}"
    echo "build_config=${{ parameters.build_config }}"
  displayName: 'Print Parameters'

- bash: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    echo '##vso[task.prependpath]$HOME/.cargo/bin'
    source "$HOME/.cargo/env"
    rustup toolchain install 1.86.0
    rustup override set 1.86.0
    if [ "$(arch)" = "arm64" ]; then
      rustup target add aarch64-apple-darwin --toolchain 1.86.0
    fi
    rustc --version
    rustup show active-toolchain
  displayName: 'Install Rust Toolchain'
  workingDirectory: '$(Build.Repository.LocalPath)'

- bash: |
    brew update --quiet
    brew install --quiet llvm@18
    LLVM_PREFIX="$(brew --prefix llvm@18)"
    echo "##vso[task.setvariable variable=LLVM_PREFIX]$LLVM_PREFIX"
    echo "##vso[task.prependpath]$LLVM_PREFIX/bin"
  displayName: 'Install LLVM'
  workingDirectory: '$(Build.Repository.LocalPath)'

- powershell: |
    $env:MACOSX_DEPLOYMENT_TARGET = "12.0" # Monterey
    $env:CC="$env:LLVM_PREFIX\bin\clang"
    $env:CXX="$env:LLVM_PREFIX\bin\clang++"
    if ("$(arch)" -eq "arm64") {
      $env:CARGO_BUILD_TARGET = "aarch64-apple-darwin"
      $env:CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER = $env:CC
      $env:CC_aarch64_apple_darwin = $env:CC
      $env:CXX_aarch64_apple_darwin = $env:CXX
      Remove-Item Env:CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER -ErrorAction SilentlyContinue
      Remove-Item Env:CC_x86_64_apple_darwin -ErrorAction SilentlyContinue
      cmake --preset macos_$(arch)_$(ep)_$(build_config) -DCMAKE_OSX_ARCHITECTURES=arm64 -DRust_CARGO_TARGET=aarch64-apple-darwin
    } else {
      cmake --preset macos_$(arch)_$(ep)_$(build_config)
    }
  displayName: 'Configure CMake C API'
  workingDirectory: '$(Build.Repository.LocalPath)'

- powershell: |
    cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --parallel --target ${{ parameters.target }}
  displayName: 'Build C API'
  workingDirectory: '$(Build.Repository.LocalPath)'

- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - powershell: |
      python -m pip install wheel
    displayName: 'Install wheel'

  - powershell: |
      $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
      cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --target package
    displayName: 'Package C/C++ API'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - bash: |
      set -e -x
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      tar -xvzf onnxruntime-genai-*.tar.gz -C .
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec zip -FSr --symlinks {}.zip {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      rm -rf $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package/onnxruntime-genai-*.tar.gz
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec rm -rf {} +
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
    displayName: 'Convert from .tar.gz to .zip'
    workingDirectory: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

  - template: compliant/mac-esrp-archive-step.yml
    parameters:
      FolderPath: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'
      Pattern: '*.zip'

  - bash: |
      set -e -x
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -name 'onnxruntime-genai-*.zip' -exec unzip {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find . -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec tar -czvf {}.tar.gz {} \;
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      rm -rf $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package/onnxruntime-genai-*.zip
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
      find $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package -maxdepth 1 -type d -name 'onnxruntime-genai-*' -exec rm -rf {} +
      ls -al $(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package
    displayName: 'Convert from .zip to .tar.gz'
    workingDirectory: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

  - task: 1ES.PublishPipelineArtifact@1
    displayName: 'Publish Artifact: ONNXRuntime Genai capi'
    inputs:
      artifactName: $(artifactName)-capi
      targetPath: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/package'

- ${{ if eq(parameters.target, 'python') }}:
  - powershell: |
      python -m pip install wheel
    displayName: 'Install wheel'

  - powershell: |
      $env:RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup"
      # From: https://github.com/pypa/cibuildwheel/blob/93542c397cfe940bcbb8f1eff5c37d345ea16653/cibuildwheel/macos.py#L247-L260
      if ("$(arch)" -eq "arm64") {
          $env:_PYTHON_HOST_PLATFORM = "macosx-12.0-arm64"
          $env:ARCHFLAGS = "-arch arm64"
      }
      else {
          $env:_PYTHON_HOST_PLATFORM = "macosx-12.0-x86_64"
          $env:ARCHFLAGS = "-arch x86_64"
      }
      cmake --build --preset macos_$(arch)_$(ep)_$(build_config) --parallel --PyPackageBuild
    displayName: 'Build Python Wheel'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - powershell: |
      Get-ChildItem -Path $(Build.Repository.LocalPath) -Recurse
    displayName: 'List all files in the repo for debugging'
    workingDirectory: '$(Build.Repository.LocalPath)'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/build/$(ep)/$(os)-$(arch)/wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/wheel'

  - task: 1ES.PublishPipelineArtifact@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      artifactName: $(artifactName)-$(PyNoDotVer)-wheel
      targetPath: '$(Build.ArtifactStagingDirectory)/wheel'
