parameters:
- name: arch
  type: string
- name: ep
  type: string
- name: ort_version
  type: string
- name: ort_filename
  type: string
- name: target
  type: string
  default: 'onnxruntime-genai'
- name: cuda_version
  type: string
steps:
- checkout: self
  clean: true
  submodules: recursive
- task: onebranch.pipeline.tsaoptions@1
  displayName: 'OneBranch TSAOptions'
  inputs:
    tsaConfigFilePath: '$(Build.SourcesDirectory)\.config\tsaoptions.json'
    appendSourceBranchName: false

- template: set-nightly-build-option-variable-step.yml

- script: |
    echo "arch=${{ parameters.arch }}"
    echo "ort_version=${{ parameters.ort_version }}"
    echo "ep=${{ parameters.ep }}"
    echo "cuda_version=${{ parameters.cuda_version }}"
    echo "target=${{ parameters.target }}"
    echo "ort_filename=${{ parameters.ort_filename }}"
  displayName: 'Print Parameters'

- template: download-ort.yaml
  parameters:
    archive: 'zip'
    genai_src: '$(Build.SourcesDirectory)'
    ort_filename: ${{ parameters.ort_filename }}
    ort_version: ${{ parameters.ort_version }}

- powershell: |
    azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v${{ parameters.cuda_version }}" '$(Build.SourcesDirectory)\cuda_sdk'
  displayName: 'Download CUDA'
  condition: eq('${{ parameters.ep }}', 'cuda')
  workingDirectory: '$(Build.SourcesDirectory)'

- powershell: |
    cmake --preset windows_${{ parameters.arch }}_${{ parameters.ep }}_release -T cuda='$(Build.SourcesDirectory)\cuda_sdk\v${{ parameters.cuda_version }}'
  displayName: 'Configure CMake C API with CUDA'
  condition: eq('${{ parameters.ep }}', 'cuda')
  workingDirectory: '$(Build.SourcesDirectory)'

- powershell: |
    cmake --preset windows_${{ parameters.arch }}_${{ parameters.ep }}_release
  displayName: 'Configure CMake C API without CUDA'
  condition: ne('${{ parameters.ep }}', 'cuda')
  workingDirectory: '$(Build.SourcesDirectory)'

- powershell: |
    cmake --build --preset windows_${{ parameters.arch }}_${{ parameters.ep }}_release --parallel --target ${{ parameters.target }}
  displayName: 'Build C API'
  workingDirectory: '$(Build.SourcesDirectory)'

- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - template: win-esrp-dll-step.yml
    parameters:
      FolderPath: '$(Build.SourcesDirectory)\build\release\${{ parameters.ep }}_default\Release'
      DisplayName: 'ESRP - Sign C++ dlls'

- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '$(Build.SourcesDirectory)\**\*genai.dll'
    continueOnError: true