parameters:
- name: arch
  type: string
- name: ep
  type: string
- name: ort_filename
  type: string
- name: ort_version
  type: string
- name: PythonVersion
  type: string
- name: genai_src
  type: string
  default: '$(Build.SourcesDirectory)/onnxruntime-genai'
steps:

- checkout: self # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/onnxruntime-genai,
  clean: true
  submodules: recursive

- checkout: manylinux # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/manylinux,
  clean: true
  submodules: recursive

- template: set-nightly-build-option-variable-step.yml

- script: |
    echo "arch=${{ parameters.arch }}"
    echo "ort_version=${{ parameters.ort_version }}"
    echo "ep=${{ parameters.ep }}"
    echo "PythonVersion=${{ parameters.PythonVersion }}"
    echo "genai_src=${{ parameters.genai_src }}"
    echo "ort_filename=${{ parameters.ort_filename }}"
  displayName: 'Print Parameters'

- template: download-ort.yaml
  parameters:
    archive: 'tgz'
    genai_src: ${{ parameters.genai_src }}
    ort_filename: ${{ parameters.ort_filename }}
    ort_version: ${{ parameters.ort_version }}
- script: |
    set -e -x
    az login --identity --username 63b63039-6328-442f-954b-5a64d124e5b4
    az acr login --name onnxruntimebuildcache --subscription 00c06639-6ee4-454e-8058-8d8b1703bd87
    python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/manylinux/Dockerfile.manylinux2_28_${{ parameters.ep }} \
      --context tools/ci_build/github/linux/docker/manylinux \
      --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
      --container-registry onnxruntimebuildcache \
      --manylinux-src $(Build.SourcesDirectory)/manylinux \
      --multiple_repos \
      --repository onnxruntime${{ parameters.ep }}build${{ parameters.arch }}
  displayName: 'Get Docker Image'
  workingDirectory: '${{ parameters.genai_src }}'

- ${{ if eq(parameters.PythonVersion, '3.8') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF \
            -DMANYLINUX=ON \
            -DPYTHON_EXECUTABLE=/opt/python/cp38-cp38/bin/python3.8 && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target python"
    displayName: 'Build Python Wheel 3.8'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.PythonVersion, '3.9') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF \
            -DMANYLINUX=ON \
            -DPYTHON_EXECUTABLE=/opt/python/cp39-cp39/bin/python3.9 && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target python"
    displayName: 'Build Python Wheel 3.9'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.PythonVersion, '3.10') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp310-cp310/bin/python3.10 && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
    displayName: 'Build Python Wheel 3.10'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.PythonVersion, '3.11') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF \
            -DMANYLINUX=ON \
            -DPYTHON_EXECUTABLE=/opt/python/cp311-cp311/bin/python3.11 && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target python"
    displayName: 'Build Python Wheel 3.11'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.PythonVersion, '3.12') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF \
            -DMANYLINUX=ON \
            -DPYTHON_EXECUTABLE=/opt/python/cp312-cp312/bin/python3.12 && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target python"
    displayName: 'Build Python Wheel 3.12'
    workingDirectory: '${{ parameters.genai_src }}'

- script: |
    ls $(genai_src) -R
  displayName: 'List files from SourceDirectory'