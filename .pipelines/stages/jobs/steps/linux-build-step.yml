parameters:
  arch: 'x64'
  ort_version: '1.17.1'
  ep: 'cpu'
  cuda_version: '11.8'
  target: 'onnxruntime-genai'
  python_path: 'python3'
  genai_src: '$(Build.SourcesDirectory)/onnxruntime-genai'
steps:

- checkout: self # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/onnxruntime-genai,
  clean: true
  submodules: recursive

- checkout: manylinux # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/manylinux,
  clean: true
  submodules: recursive

- template: set-nightly-build-option-variable-step.yml

- task: DownloadGitHubRelease@0
  inputs:
    connection: 'GitHub - Release'
    userRepository: 'microsoft/onnxruntime'
    defaultVersionType: 'specificTag'
    version: 'v${{ parameters.ort_version }}'
    ${{ if eq(parameters.ep, 'cuda') }}:
      ${{ if eq(parameters.cuda_version, '11.8') }}:
        itemPattern: 'onnxruntime-linux-${{ parameters.arch }}-gpu-${{ parameters.ort_version }}*'
      ${{ else }}:
        itemPattern: 'onnxruntime-linux-${{ parameters.arch }}-cuda12-${{ parameters.ort_version }}*'
    ${{ else }}:
      itemPattern: 'onnxruntime-linux-${{ parameters.arch }}-${{ parameters.ort_version }}*'
    downloadPath: '${{ parameters.genai_src }}'
  displayName: Download ONNXRuntime ${{ parameters.arch }} ${{ parameters.ep }}

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '**/*.tgz'
    destinationFolder: '${{ parameters.genai_src }}'
    cleanDestinationFolder: false
    overwriteExistingFiles: true
  displayName: Unzip OnnxRuntime

- bash: |
    mv onnxruntime-linux-${{ parameters.arch }}-${{ parameters.ort_version }} ort
  displayName: Rename Onnxruntime CPU to ort
  condition: eq('${{ parameters.ep }}', 'cpu')
  workingDirectory: '${{ parameters.genai_src }}'

- bash: |
    mv onnxruntime-linux-${{ parameters.arch }}-gpu-${{ parameters.ort_version }} ort
  displayName: Rename Onnxruntime CUDA 11 to ort
  condition: and(eq('${{ parameters.ep }}', 'cuda'), eq('${{ parameters.cuda_version }}', '11.8'))
  workingDirectory: '${{ parameters.genai_src }}'

- bash: |
    mv onnxruntime-linux-${{ parameters.arch }}-cuda12-${{ parameters.ort_version }} ort
  displayName: Rename Onnxruntime CUDA 12 to ort
  condition: and(eq('${{ parameters.ep }}', 'cuda'), eq('${{ parameters.cuda_version }}', '12.2'))
  workingDirectory: '${{ parameters.genai_src }}'

- bash: |
    rm -rf ort/lib/*tensorrt*
  displayName: 'Remove tensorrt from lib'
  workingDirectory: '${{ parameters.genai_src }}'

- script: |
    set -e -x
    az login --identity --username 63b63039-6328-442f-954b-5a64d124e5b4
    az acr login --name onnxruntimebuildcache --subscription 00c06639-6ee4-454e-8058-8d8b1703bd87
    python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/manylinux/Dockerfile.manylinux2_28_${{ parameters.ep }} \
      --context tools/ci_build/github/linux/docker/manylinux \
      --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
      --container-registry onnxruntimebuildcache \
      --manylinux-src $(Build.SourcesDirectory)/manylinux \
      --multiple_repos \
      --repository onnxruntime${{ parameters.ep }}build${{ parameters.arch }}
  displayName: 'Get Docker Image'
  workingDirectory: '${{ parameters.genai_src }}'

- ${{ if eq(parameters.target, 'python') }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF \
            -DMANYLINUX=ON \
            -DPYTHON_EXECUTABLE=${{ parameters.python_path }} && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target python"
    displayName: 'Build Python Wheel'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ else }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target ${{ parameters.target }}"
    displayName: 'Build Python Wheel'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '$(Build.SourcesDirectory)/**/*genai.so'
    continueOnError: true
- script: |
    ls $(genai_src) -R