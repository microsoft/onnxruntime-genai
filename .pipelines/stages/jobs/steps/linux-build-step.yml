parameters:
  arch: 'x64'
  ort_version: '1.17.1'
  ep: 'cpu'
  cuda_version: '11.8'
  target: 'onnxruntime-genai'
  python_version: "3.8"
  genai_src: '$(Build.SourcesDirectory)/onnxruntime-genai'
steps:

- checkout: self # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/onnxruntime-genai,
  clean: true
  submodules: recursive

- checkout: manylinux # due to checkout multiple repos, the root directory is $(Build.SourcesDirectory)/manylinux,
  clean: true
  submodules: recursive

- template: set-nightly-build-option-variable-step.yml

- template: download-ort.yaml
  parameters:
    genai_src: ${{ parameters.genai_src }}
    archive: 'tgz'
    ${{ if eq(parameters.ep, 'cpu') }}:
      ort_filename: 'onnxruntime-linux-${{ parameters.arch }}-cpu-${{ parameters.ort_version }}'
    ${{ else}}:
      ${{if eq(parameters.cuda_version, '11.8') }}:
        ort_filename: 'onnxruntime-linux-${{ parameters.arch }}-gpu-${{ parameters.ort_version }}'
      ${{ else }}:
        ort_filename: 'onnxruntime-linux-${{ parameters.arch }}-cuda12-${{ parameters.ort_version }}'

- script: |
    set -e -x
    az login --identity --username 63b63039-6328-442f-954b-5a64d124e5b4
    az acr login --name onnxruntimebuildcache --subscription 00c06639-6ee4-454e-8058-8d8b1703bd87
    python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/manylinux/Dockerfile.manylinux2_28_${{ parameters.ep }} \
      --context tools/ci_build/github/linux/docker/manylinux \
      --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
      --container-registry onnxruntimebuildcache \
      --manylinux-src $(Build.SourcesDirectory)/manylinux \
      --multiple_repos \
      --repository onnxruntime${{ parameters.ep }}build${{ parameters.arch }}
  displayName: 'Get Docker Image'
  workingDirectory: '${{ parameters.genai_src }}'

- ${{ if eq(parameters.target, 'python') }}:
  - ${{ if eq(parameters.python_version, '3.8') }}:
    - script: |
        set -e -x
        docker run \
        --rm \
        --volume ${{ parameters.genai_src }}:/ort_genai_src \
        -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
        bash -c " \
            /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp38-cp38/bin/python3.8 && \
            /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
      displayName: 'Build Python Wheel 3.8'
      workingDirectory: '${{ parameters.genai_src }}'
  - ${{ if eq(parameters.python_version, '3.9') }}:
    - script: |
        set -e -x
        docker run \
        --rm \
        --volume ${{ parameters.genai_src }}:/ort_genai_src \
        -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
        bash -c " \
            /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp39-cp39/bin/python3.9 && \
            /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
      displayName: 'Build Python Wheel 3.9'
      workingDirectory: '${{ parameters.genai_src }}'
  - ${{ if eq(parameters.python_version, '3.10') }}:
    - script: |
        set -e -x
        docker run \
        --rm \
        --volume ${{ parameters.genai_src }}:/ort_genai_src \
        -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
        bash -c " \
            /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp310-cp310/bin/python3.10 && \
            /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
      displayName: 'Build Python Wheel 3.10'
      workingDirectory: '${{ parameters.genai_src }}'
  - ${{ if eq(parameters.python_version, '3.11') }}:
    - script: |
        set -e -x
        docker run \
        --rm \
        --volume ${{ parameters.genai_src }}:/ort_genai_src \
        -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
        bash -c " \
            /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp311-cp311/bin/python3.11 && \
            /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
      displayName: 'Build Python Wheel 3.11'
      workingDirectory: '${{ parameters.genai_src }}'
  - ${{ if eq(parameters.python_version, '3.12') }}:
    - script: |
        set -e -x
        docker run \
        --rm \
        --volume ${{ parameters.genai_src }}:/ort_genai_src \
        -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
        bash -c " \
            /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
              -DENABLE_TESTS=OFF \
              -DMANYLINUX=ON \
              -DPYTHON_EXECUTABLE=/opt/python/cp312-cp312/bin/python3.12 && \
            /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
              --target python"
      displayName: 'Build Python Wheel 3.12'
      workingDirectory: '${{ parameters.genai_src }}'

- ${{ else }}:
  - script: |
      set -e -x
      docker run \
      --rm \
      --volume ${{ parameters.genai_src }}:/ort_genai_src \
      -w /ort_genai_src/ onnxruntime${{ parameters.ep }}build${{ parameters.arch }} \
      bash -c " \
          /usr/bin/cmake --preset linux_gcc_${{ parameters.ep }}_release \
            -DENABLE_TESTS=OFF && \
          /usr/bin/cmake --build --preset linux_gcc_${{ parameters.ep }}_release \
            --target ${{ parameters.target }}"
    displayName: 'Build GenAi'
    workingDirectory: '${{ parameters.genai_src }}'
- ${{ if eq(parameters.target, 'onnxruntime-genai') }}:
  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '$(Build.SourcesDirectory)/**/*genai.so'
    continueOnError: true
- script: |
    ls $(genai_src) -R