parameters:
- name: archiveType
  type: string
- name: ep
  type: string
  default: cpu
steps:

- task: DownloadPackage@1
  inputs:
    packageType: 'nuget'
    feed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/$(feed_name)'
    definition: '$(ort_filename)' # Can also be package name
    version: '$(ort_version)'
    extract: false
    downloadPath: '$(Build.Repository.LocalPath)'
  displayName: Download Onnxruntime file
- ${{ if eq(parameters.archiveType, 'zip') }}:
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.Repository.LocalPath)/*.nupkg'
      destinationFolder: '$(Build.Repository.LocalPath)/ort'
      cleanDestinationFolder: false
      overwriteExistingFiles: true
    displayName: Unzip OnnxRuntime
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/ort/runtimes/$(os)-$(arch)/native'
      TargetFolder: '$(Build.Repository.LocalPath)/ort/lib'
- ${{ else }}:
  - script: |
      mv $(Build.Repository.LocalPath)/$(ort_filename).nupkg $(Build.Repository.LocalPath)/$(ort_filename).zip
    displayName: Rename OnnxRuntime nuget package to zip
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.Repository.LocalPath)/$(ort_filename).zip'
      destinationFolder: '$(Build.Repository.LocalPath)/ort'
      cleanDestinationFolder: false
      overwriteExistingFiles: true
    displayName: Unzip OnnxRuntime
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/ort/runtimes/$(os)-$(arch)/native'
      TargetFolder: '$(Build.Repository.LocalPath)/ort/lib'
  # TODO: Find out why do we need to to have libonnxruntime.so.ort_stable_version
  - script: |
      set -e -x
      ort_stable_version=$(echo $(ort_version) | cut -d- -f1)
      echo $ort_stable_version
      mv libonnxruntime.so libonnxruntime.so.$ort_stable_version 
      ln -s libonnxruntime.so.$ort_stable_version libonnxruntime.so
    displayName: Copy libonnxruntime.so to libonnxruntime.so.
    workingDirectory: '$(Build.Repository.LocalPath)/ort/lib'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)/ort/'
    Contents: '**/native/include/**'
    TargetFolder: '$(Build.Repository.LocalPath)/ort/include'
    flattenFolders: true

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)/ort/lib'
    Contents: '*tensorrt*'
    RemoveSourceFolder: false
  displayName: 'Remove tensorrt from lib'
  continueOnError: true

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)/ort/lib'
    Contents: '*.pdb'
    RemoveSourceFolder: false
  displayName: 'Remove .pdb files from lib'
  continueOnError: true
