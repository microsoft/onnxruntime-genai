parameters:
- name: SpecificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false
- name: BuildId
  displayName: Specific Artifact's BuildId
  type: string
  default: '0'
- name: arch
  type: string
- name: ep
  type: string
- name: ort_version
  type: string
- name: cuda_version
  type: string
  default: ''
- name: os
  type: string
  values:
  - 'linux'
  - 'win'

jobs:
- job: nuget_${{ parameters.os }}_${{ parameters.ep }}_${{ parameters.arch }}_validation
  ${{ if eq(parameters.os, 'linux') }}:
    ${{ if eq(parameters.ep, 'cuda') }}:
      pool: 'Onnxruntime-Linux-GPU'
    ${{ elseif eq(parameters.arch, 'arm64') }}:
      pool: 'onnxruntime-genai-Ubuntu2004-ARM-CPU'
    ${{ else }}:
      pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
  ${{ if eq(parameters.os, 'win') }}:
    ${{ if eq(parameters.arch, 'x64') }}:
      ${{ if eq(parameters.ep, 'directml') }}:
        pool: 'onnxruntime-Win2022-GPU-dml-A10'
      ${{ elseif eq(parameters.ep, 'cuda') }}:
        pool: 'onnxruntime-Win2022-GPU-A10'
      ${{ else }}:
        pool: 'onnxruntime-Win-CPU-2022'
    ${{ elseif eq(parameters.arch, 'arm64') }}:
      pool: 'onnxruntime-genai-windows-vs-2022-arm64'
    ${{ else }}:
      pool: 'onnxruntime-Win-CPU-2022'

  timeoutInMinutes: 180
  #  set variables here to be used in the template and steps
  variables:
  - name: arch
    value: ${{ parameters.arch }}
  - name: artifactName
    value: 'onnxruntime-genai-${{ parameters.ep }}'
  - name: buildConfig
    value: 'Release'
  - name: buildDir
    value: 'build/${{ parameters.ep }}'
  - name: cuda_version
    value: ${{ parameters.cuda_version }}
  - name: ep
    value: ${{ parameters.ep }}
  - name: ort_version
    value: ${{ parameters.ort_version }}
  - name: os
    value: ${{ parameters.os }}

  - name: csproj_configuration
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'Release'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'Release_Cuda'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'Release_DirectML'
    ${{ else }}:
      value: 'Release'

  - name: prebuild_phi3_mini_model_folder
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'cuda/cuda-int4-rtn-block-32'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'directml/directml-int4-awq-block-128'
    ${{ else }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'

  - name: cuda_docker_image
    ${{ if eq(parameters.cuda_version, '11.8') }}:
      value: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda11_x64_almalinux8_gcc11:20240531.1
    ${{ else }}:
      value: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda12_x64_ubi8_gcc12:20240610.1

  workspace:
    clean: all
  steps:
  - script: |
      MKDIR $(Agent.ToolsDirectory)\Python\3.12.3\arm64
      XCOPY /s /y /h /e /c /q "C:\Python\Python312\*.*" $(Agent.ToolsDirectory)\Python\3.12.3\arm64\
      COPY NUL $(Agent.ToolsDirectory)\Python\3.12.3\arm64.complete
      DIR $(Agent.ToolsDirectory)\Python
      DIR $(Agent.ToolsDirectory)\Python\3.12.3
      DIR $(Agent.ToolsDirectory)\Python\3.12.3\arm64
      DIR "C:\Python"
    displayName: Copy python 3.12.3 version to agent tools directory
    condition: and(eq(variables['arch'], 'arm64'), eq(variables['os'], 'win'))

  - task: NuGetAuthenticate@1

  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.12
      addToPath: true
      architecture: $(arch)

  - task: UseDotNet@2
    inputs:
      version: '8.x'

  - template: steps/utils/download-huggingface-model.yml
    parameters:
      StepName: 'Download Model from HuggingFace'
      HuggingFaceRepo: 'microsoft/Phi-3-mini-4k-instruct-onnx'
      RepoFolder: $(prebuild_phi3_mini_model_folder)
      LocalFolder: 'models'
      WorkingDirectory: '$(Build.Repository.LocalPath)/examples/csharp/HelloPhi'
      HuggingFaceToken: $(HF_TOKEN)
      os: ${{ parameters.os }}

  - template: steps/utils//flex-download-pipeline-artifact.yml
    parameters:
      StepName: 'Download NuGet Artifacts'
      ArtifactName: $(artifactName)-nuget
      TargetPath: '$(Build.BinariesDirectory)/nuget'
      SpecificArtifact: ${{ parameters.specificArtifact }}
      BuildId: ${{ parameters.BuildId }}

  - ${{ if eq(parameters.os, 'win') }}:
    - ${{ if eq(parameters.ep, 'cuda') }}:
      - powershell: |
          $env:AZCOPY_MSI_CLIENT_ID = "63b63039-6328-442f-954b-5a64d124e5b4";
          azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v$(cuda_version)" 'cuda_sdk'
        displayName: 'Download CUDA $(cuda_version)'
        workingDirectory: '$(Build.Repository.LocalPath)'
    - powershell: |
        if ("$(ep)" -eq "cuda") {
          $env:CUDA_PATH = '$(Build.Repository.LocalPath)\cuda_sdk\v$(cuda_version)'
          $env:PATH = "$env:CUDA_PATH\bin;$env:CUDA_PATH\extras\CUPTI\lib64;$env:PATH"
          Write-Host $env:PATH
        }
        dotnet --info
        Copy-Item -Force -Recurse -Verbose $(Build.BinariesDirectory)/nuget/* -Destination examples/csharp/HelloPhi/
        cd examples/csharp/HelloPhi
        Move-Item models\$(prebuild_phi3_mini_model_folder) models\phi-3
        dotnet restore -r $(os)-$(arch) /property:Configuration=$(csproj_configuration) --source https://api.nuget.org/v3/index.json --source https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/nuget/v3/index.json --source $PWD --disable-parallel --verbosity detailed
        dotnet run -r $(os)-$(arch) --configuration $(csproj_configuration) --no-restore --verbosity normal -- -m ./models/phi-3
      displayName: 'Run Example With Artifact'
      workingDirectory: '$(Build.Repository.LocalPath)'
      env:
        NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS: 180
        NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS: 180
  - ${{ elseif eq(parameters.os, 'linux') }}:
    - bash: |
       dotnet --info
       cp $(Build.BinariesDirectory)/nuget/* examples/csharp/HelloPhi/
       cd examples/csharp/HelloPhi
       mv models/$(prebuild_phi3_mini_model_folder) models/phi-3
       dotnet restore -r $(os)-$(arch) /property:Configuration=$(csproj_configuration) --source https://api.nuget.org/v3/index.json --source https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/nuget/v3/index.json --source $PWD --disable-parallel --verbosity detailed
       dotnet build ./HelloPhi.csproj -r $(os)-$(arch) /property:Configuration=$(csproj_configuration) --no-restore --self-contained
      displayName: 'Perform dotnet restore & build'
      workingDirectory: '$(Build.Repository.LocalPath)'
      env:
        NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS: 180
        NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS: 180

    - ${{ if eq(parameters.ep, 'cuda') }}:
      - bash: |
          set -e -x
          az login --identity --username 63b63039-6328-442f-954b-5a64d124e5b4
          az acr login --name onnxruntimebuildcache --subscription 00c06639-6ee4-454e-8058-8d8b1703bd87
          docker pull $(cuda_docker_image)

          docker run \
            --gpus all \
            --rm \
            --volume $(Build.Repository.LocalPath):/ort_genai_src \
            --volume $(Build.BinariesDirectory):/ort_genai_binary \
            -e HF_TOKEN=$HF_TOKEN \
            -w /ort_genai_src/ $(cuda_docker_image) \
            bash -c " \
                export ORTGENAI_LOG_ORT_LIB=1 && \
                cd /ort_genai_src/examples/csharp/HelloPhi && \
                chmod +x ./bin/Release_Cuda/net6.0/linux-x64/HelloPhi && \
                ./bin/Release_Cuda/net6.0/linux-x64/HelloPhi -m ./models/phi-3"

        displayName: 'Run Example With Artifact'
        workingDirectory: '$(Build.Repository.LocalPath)'

    - ${{ elseif eq(parameters.ep, 'cpu') }}:
      - bash: |
          export ORTGENAI_LOG_ORT_LIB=1
          cd examples/csharp/HelloPhi
          dotnet run -r $(os)-$(arch) --configuration $(csproj_configuration) --no-build --verbosity normal -- -m ./models/phi-3
        displayName: 'Run Example With Artifact'
        workingDirectory: '$(Build.Repository.LocalPath)'

  - template: steps/compliant-and-cleanup-step.yml

