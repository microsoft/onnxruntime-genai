parameters:
- name: SpecificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false
- name: BuildId
  displayName: Specific Artifact's BuildId
  type: string
  default: '0'
- name: arch
  type: string
- name: ep
  type: string
- name: ort_version
  type: string
- name: cuda_version
  type: string
  default: ''
- name: os
  type: string
  values:
  - 'linux'
  - 'win'

jobs:
- job: nuget_${{ parameters.os }}_${{ parameters.ep }}_${{ parameters.arch }}_validation
  ${{ if eq(parameters.os, 'linux') }}:
    ${{ if eq(parameters.ep, 'cuda') }}:
      pool: 'Onnxruntime-Linux-GPU'
    ${{ else }}:
      pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
  ${{ if eq(parameters.os, 'win') }}:
    ${{ if eq(parameters.ep, 'directml') }}:
      pool: 'onnxruntime-Win2022-GPU-dml-A10'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      pool: 'onnxruntime-Win2022-GPU-A10'
    ${{ elseif eq(parameters.arch, 'arm64') }}:
      pool: 'onnxruntime-genai-windows-vs-2022-arm64'
    ${{ else }}:
      pool: 'onnxruntime-Win-CPU-2022'

  timeoutInMinutes: 180
  #  set variables here to be used in the template and steps
  variables:
  - name: arch
    value: ${{ parameters.arch }}
  - name: artifactName
    value: 'onnxruntime-genai-${{ parameters.os }}-${{ parameters.ep }}-${{ parameters.arch }}'
  - name: buildConfig
    value: 'Release'
  - name: buildDir
    value: 'build/${{ parameters.ep }}'
  - name: cuda_version
    value: ${{ parameters.cuda_version }}
  - name: ep
    value: ${{ parameters.ep }}
  - name: ort_version
    value: ${{ parameters.ort_version }}
  - name: GDN_CODESIGN_TARGETDIRECTORY
    value: '$(Build.ArtifactStagingDirectory)/nuget'
  - name: os
    value: ${{ parameters.os }}
  - name: ort_filename
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'Microsoft.ML.OnnxRuntime'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      ${{if eq(parameters.os, 'win') }}:
        value: 'Microsoft.ML.OnnxRuntime.Gpu.Windows'
      ${{ else }}:
        value: 'Microsoft.ML.OnnxRuntime.Gpu.Linux'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'Microsoft.ML.OnnxRuntime.DirectML'
    ${{ else }}:
      value: 'Microsoft.ML.OnnxRuntime'

  - name: csproj_configuration
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'Release'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'Release_Cuda'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'Release_DirectML'
    ${{ else }}:
      value: 'Release'

  - name: genai_nuget_ext
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: ''
    ${{ if eq(parameters.ep, 'cuda') }}:
      value: '.Cuda'
    ${{ if eq(parameters.ep, 'directml') }}:
      value: '.DirectML'
  - name: ort_nuget_ext
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: ''
    ${{ if eq(parameters.ep, 'cuda') }}:
      value: '.Gpu'
    ${{ if eq(parameters.ep, 'directml') }}:
      value: '.DirectML'
  - name: ortHome
    value: 'ort'
  - name: dml_dir
    value: 'Microsoft.AI.DirectML.1.14.2'
  - name: dml_zip
    value: 'Microsoft.AI.DirectML.1.14.2.zip'
  - name: dml_url
    value: "https://www.nuget.org/api/v2/package/Microsoft.AI.DirectML/1.14.2"
  - name: prebuild_phi3_mini_model_folder
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'cuda/cuda-int4-rtn-block-32'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'directml/directml-int4-awq-block-128'
    ${{ else }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'

  workspace:
    clean: all
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.12
      addToPath: true
      architecture: $(arch)

  - template: steps/utils/download-huggingface-model.yml
    parameters:
      StepName: 'Download Model from HuggingFace'
      HuggingFaceRepo: 'microsoft/Phi-3-mini-4k-instruct-onnx'
      RepoFolder: $(prebuild_phi3_mini_model_folder)
      LocalFolder: 'models'
      WorkingDirectory: '$(Build.Repository.LocalPath)/examples/csharp/HelloPhi'
      HuggingFaceToken: $(HF_TOKEN)
      os: ${{ parameters.os }}

  - template: steps/utils//flex-download-pipeline-artifact.yml
    parameters:
      StepName: 'Download NuGet Artifacts'
      ArtifactName: $(ArtifactName)-nuget
      TargetPath: '$(Build.BinariesDirectory)/nuget'
      SpecificArtifact: ${{ parameters.specificArtifact }}
      BuildId: ${{ parameters.BuildId }}

  - ${{ if eq(parameters.os, 'win') }}:
    - powershell: |
        Copy-Item -Force -Recurse -Verbose $(Build.BinariesDirectory)/nuget/* -Destination examples/csharp/HelloPhi/
        cd examples/csharp/HelloPhi
        Move-Item models\$(prebuild_phi3_mini_model_folder) models\phi-3
        dotnet restore /property:Configuration=$(csproj_configuration) --source .
        dotnet run -- -m ./models/phi-3
      displayName: 'Run Example With Artifact'
      workingDirectory: '$(Build.Repository.LocalPath)'
  - ${{ elseif eq(parameters.os, 'linux') }}:
    - bash: |
        cp $(Build.BinariesDirectory)/nuget/* examples/csharp/HelloPhi/
        cd examples/csharp/HelloPhi
        mv models/$(prebuild_phi3_mini_model_folder) models/phi-3
        dotnet restore /property:Configuration=$(csproj_configuration) --source . 
        dotnet run -- -m ./models/phi-3
  - template: steps/compliant-and-cleanup-step.yml

