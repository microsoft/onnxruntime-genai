parameters:
  ort_version: '1.17.0'
  cuda_version: '11.8'
  ep: 'cpu'
  arch: 'x64'
jobs:
- job: Windows_Nuget_Packaging_${{ parameters.arch }}_${{ parameters.ep }}
  pool: 'onnxruntime-Win-CPU-2022'
  variables:
  - name: build_config
    value: 'RelWithDebInfo'
  - name: build_dir
    ${{ if eq(parameters.arch, 'x64') }}:
      value: win-x64
    ${{ if eq(parameters.arch, 'arm64') }}:
      value: win-arm64
  - name: id
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: Microsoft.ML.OnnxRuntimeGenAI
    ${{ if eq(parameters.ep, 'gpu') }}:
      value: Microsoft.ML.OnnxRuntimeGenAI.Gpu
  - name: arch
    value: ${{ parameters.arch }}
  - name: ep
    value: ${{ parameters.ep }}
  - name: artifactName
    value: onnxruntime-genai-nuget-win-${{ parameters.arch }}-${{ parameters.arch }}
  timeoutInMinutes: 180
  workspace:
    clean: all
  steps:
  - template: steps/capi-win-build-step.yml
    parameters:
      arch: $(arch)
      ort_version: ${{ parameters.ort_version }}
      ep: $(ep)
      build_dir: $(build_dir)
      build_config: $(build_config)
      cuda_version: ${{ parameters.cuda_version }}

  - bash:
      dotnet build Microsoft.ML.OnnxRuntimeGenAI.csproj -p:Configuration="$(build_config)" -p:NativeBuildOutputDir="$(build_dir)\$(build_config)"
    displayName: 'Build CSharp'
    workingDirectory: '$(Build.SourcesDirectory)\src\csharp'

  - powershell: |
      $VERSION = Get-Content $(Build.SourcesDirectory)\VERSION_INFO
      nuget.exe pack Microsoft.ML.OnnxRuntimeGenAI.nuspec `
        -Prop version=$VERSION `
        -Prop id=$(id)
      nuget.exe pack Microsoft.ML.OnnxRuntimeGenAI.Managed.nuspec `
        -Prop version=$VERSION
    displayName: 'Nuget Packaging'
    workingDirectory: '$(Build.SourcesDirectory)\nuget'

  - powershell: |
      Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse
  - task: CopyFiles@2
    displayName: 'Copy Nuget to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\nuget'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime Genai python wheel'
    inputs:
      ArtifactName: $(artifactName)

  - template: steps/compliant-and-cleanup-step.yml

