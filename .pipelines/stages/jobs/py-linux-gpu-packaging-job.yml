parameters:
- name: cuda_version
  type: string
  default: '11.8'
  values:
  - 11.8
  - 12.2
jobs:
- job: Linux_GPU_Wheels
  timeoutInMinutes: 240
  workspace:
    clean: all
  pool: onnxruntime-Ubuntu2204-AMD-CPU
  variables:
  # The build machine pool doesn't have dotnet, so it can't run CG.
  - name: skipComponentGovernanceDetection
    value: true
  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - template: steps/set-nightly-build-option-variable-step.yml

  - bash: |
      pip install -r scripts/requirements.txt
      python3 scripts/download_onnxruntime.py --ort_version 1.17.0 --os linux --is_gpu True --arch x64
    displayName: Download OnnxRuntime
    workingDirectory: $(Build.SourcesDirectory)

  - script: |
      set -e -x
      python3 tools/ci_build/get_docker_image.py --dockerfile tools/ci_build/github/linux/docker/manylinux//Dockerfile.manylinux2_28_gpu \
        --context tools/ci_build/github/linux/docker/manylinux \
        --docker-build-args "--build-arg BUILD_UID=$( id -u )" \
        --container-registry onnxruntimebuildcache \
        --repository onnxruntimegpubuild
    displayName: 'Get Docker Image'

  - script: |
      set -e -x
      docker run \
        --gpus all \
        --rm \
        --volume $(Build.SourcesDirectory):/onnxruntime_src  \
        -w /onnxruntime_src onnxruntimegpubuild bash -c "echo $PATH && /usr/bin/cmake -DCMAKE_CUDA_ARCHITECTURES=86 --preset linux_gcc_cuda_release && /usr/bin/cmake --build --preset linux_gcc_cuda_release"
    displayName: 'Build Python Wheel'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/build/gcc_gpu/release/wheel'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime-genai-linux-gpu

  - template: steps/component-governance-component-detection-step.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
