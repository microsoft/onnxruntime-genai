parameters:
- name: SpecificArtifact
  displayName: Use Specific Artifact
  type: boolean
  default: false
- name: BuildId
  displayName: Specific Artifact's BuildId
  type: string
  default: '0'
- name: arch
  type: string
- name: ep
  type: string
- name: cuda_version
  type: string
  default: ''
- name: cuda_display_version
  type: string
  default: ''
- name: os
  type: string
  values:
  - 'linux'
  - 'win'
  - 'osx'

jobs:
- job: python_${{ parameters.os }}_${{ parameters.ep }}${{ parameters.cuda_display_version }}_${{ parameters.arch }}_validation
  ${{ if eq(parameters.os, 'linux') }}:
    ${{ if eq(parameters.ep, 'cuda') }}:
      pool: 'Onnxruntime-Linux-GPU'
    ${{ elseif eq(parameters.arch, 'arm64') }}:
      pool: 'onnxruntime-genai-Ubuntu2004-ARM-CPU'
    ${{ else }}:
      pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
  ${{ if eq(parameters.os, 'win') }}:
    ${{ if eq(parameters.arch, 'x64') }}:
      ${{ if eq(parameters.ep, 'directml') }}:
        pool: 'onnxruntime-Win2022-GPU-dml-A10'
      ${{ elseif eq(parameters.ep, 'cuda') }}:
        pool: 'onnxruntime-Win2022-GPU-A10'
      ${{ else }}:
        pool: 'onnxruntime-Win-CPU-2022'
    ${{ elseif eq(parameters.arch, 'arm64') }}:
      pool: 'onnxruntime-genai-windows-vs-2022-arm64'
    ${{ else }}:
      pool: 'onnxruntime-Win-CPU-2022'
  ${{ if eq(parameters.os, 'osx') }}:
    pool:
      vmImage: 'macOS-latest'

  timeoutInMinutes: 240
  workspace:
    clean: all
  #  set variables here to be used in the template and steps
  variables:
  - name: skipComponentGovernanceDetection
    ${{ if eq(parameters.os, 'linux') }}:
      value: true
    ${{ if eq(parameters.os, 'win') }}:
      value: false
  - name: arch
    value: ${{ parameters.arch }}
  - name: artifactName
    value: 'onnxruntime-genai-${{ parameters.os }}-${{ parameters.ep }}-${{ parameters.arch }}'
  - name: buildConfig
    value: 'Release'
  - name: buildDir
    value: 'build/${{ parameters.ep }}'
  - name: cuda_version
    value: ${{ parameters.cuda_version }}
  - name: ep
    value: ${{ parameters.ep }}
  - name: os
    value: ${{ parameters.os }}

  - name: py_dot_ver
    value: '3.12'

  - name: pip_package_name
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'onnxruntime_genai'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'onnxruntime_genai_cuda'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'onnxruntime_genai_directml'
    ${{ else }}:
      value: 'onnxruntime_genai'

  - name: prebuild_phi3_mini_model_folder
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'cuda/cuda-int4-rtn-block-32'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'directml/directml-int4-awq-block-128'
    ${{ else }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'

  - name: prebuild_phi3_5_vision_model_folder
    ${{ if eq(parameters.ep, 'cpu') }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'
    ${{ elseif eq(parameters.ep, 'cuda') }}:
      value: 'gpu/gpu-int4-rtn-block-32'
    ${{ elseif eq(parameters.ep, 'directml')}}:
      value: 'gpu/gpu-int4-rtn-block-32'
    ${{ else }}:
      value: 'cpu_and_mobile/cpu-int4-rtn-block-32-acc-level-4'

  - name: cuda_docker_image
    ${{ if eq(parameters.cuda_version, '11.8') }}:
      value: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda11_x64_almalinux8_gcc11:20240531.1
    ${{ else }}:
      value: onnxruntimebuildcache.azurecr.io/internal/azureml/onnxruntime/build/cuda12_x64_ubi8_gcc12:20240610.1

  steps:
  - checkout: self
    clean: true
    path: onnxruntime-genai
    submodules: recursive

  - script: |
      MKDIR $(Agent.ToolsDirectory)\Python\3.12.3\arm64
      XCOPY /s /y /h /e /c /q "C:\Python\Python312\*.*" $(Agent.ToolsDirectory)\Python\3.12.3\arm64\
      COPY NUL $(Agent.ToolsDirectory)\Python\3.12.3\arm64.complete
      DIR $(Agent.ToolsDirectory)\Python
      DIR $(Agent.ToolsDirectory)\Python\3.12.3
      DIR $(Agent.ToolsDirectory)\Python\3.12.3\arm64
      DIR "C:\Python"
    displayName: Copy python 3.12.3 version to agent tools directory
    condition: and(eq(variables['arch'], 'arm64'), eq(variables['os'], 'win'), eq(variables['py_dot_ver'], '3.12'))

  - script: |
      MKDIR $(Agent.ToolsDirectory)\Python\3.11.0\arm64
      XCOPY /s /y /h /e /c /q "C:\Python\Python311\*.*" $(Agent.ToolsDirectory)\Python\3.11.0\arm64\
      COPY NUL $(Agent.ToolsDirectory)\Python\3.11.0\arm64.complete
      DIR $(Agent.ToolsDirectory)\Python
      DIR $(Agent.ToolsDirectory)\Python\3.11.0
      DIR $(Agent.ToolsDirectory)\Python\3.11.0\arm64
      DIR "C:\Python"
    displayName: Copy python 3.11.0 version to agent tools directory
    condition: and(eq(variables['arch'], 'arm64'), eq(variables['os'], 'win'), eq(variables['py_dot_ver'], '3.11'))

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(py_dot_ver)
      addToPath: true
      architecture: $(arch)

  - template: steps/utils/flex-download-pipeline-artifact.yml
    parameters:
      StepName: 'Download Python Wheel Artifacts'
      ArtifactName: $(ArtifactName)-wheel
      TargetPath: '$(Build.BinariesDirectory)/wheel'
      SpecificArtifact: ${{ parameters.specificArtifact }}
      BuildId: ${{ parameters.BuildId }}

  - template: steps/utils/download-huggingface-model.yml
    parameters:
      HuggingFaceRepo: 'microsoft/Phi-3-mini-4k-instruct-onnx'
      LocalFolder: 'phi3-mini'
      RepoFolder: $(prebuild_phi3_mini_model_folder)
      WorkingDirectory: '$(Build.Repository.LocalPath)/examples/python'
      HuggingFaceToken: $(HF_TOKEN)
      os: ${{ parameters.os }}

  - template: steps/python-validation-step.yml
    parameters:
      PythonScriptFolder: "examples/python"
      PythonScriptName: "model-generate.py"
      LocalFolder: 'phi3-mini'
      ModelFolder: $(prebuild_phi3_mini_model_folder)

  - template: steps/utils/download-huggingface-model.yml
    parameters:
      HuggingFaceRepo: 'microsoft/Phi-3.5-vision-instruct-onnx'
      LocalFolder: 'phi3.5-vision'
      RepoFolder: $(prebuild_phi3_5_vision_model_folder)
      WorkingDirectory: '$(Build.Repository.LocalPath)/examples/python'
      HuggingFaceToken: $(HF_TOKEN)
      os: ${{ parameters.os }}

  - template: steps/python-validation-step.yml
    parameters:
      PythonScriptFolder: "examples/python"
      PythonScriptName: "phi3v.py"
      LocalFolder: 'phi3.5-vision'
      ModelFolder: $(prebuild_phi3_5_vision_model_folder)

  - template: steps/compliant-and-cleanup-step.yml
