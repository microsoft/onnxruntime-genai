jobs:
- job: Windows_GPU_Wheels
  pool: 'onnxruntime-Win-CPU-2022'
#  pool: 'onnxruntime-Win2022-GPU-A10'
  strategy:
    matrix:
      Python38:
        PythonVersion: '3.8'
      Python39:
        PythonVersion: '3.9'
      Python310:
        PythonVersion: '3.10'
      Python311:
        PythonVersion: '3.11'
      Python312:
        PythonVersion: '3.12'
  variables:
    BuildConfig: 'RelWithDebInfo'
    cuda_version: '12.2'
    cuda_dir: "$(Build.SourcesDirectory)\\cuda_sdk"
  timeoutInMinutes: 180
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true
    submodules: recursive
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PythonVersion)
      addToPath: true
      architecture: $(buildArch)
  - task: onebranch.pipeline.tsaoptions@1
    displayName: 'OneBranch TSAOptions'
    inputs:
      tsaConfigFilePath: '$(Build.SourcesDirectory)\.config\tsaoptions.json'
      appendSourceBranchName: false

  - template: steps/set-nightly-build-option-variable-step.yml


  - bash: |
      pip install -r scripts\requirements.txt
      python3 scripts\download_onnxruntime.py --is_gpu $(isGPU)
    displayName: Download OnnxRuntime
    workingDirectory: $(Build.SourcesDirectory)

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\scripts\download_onnxruntime.py'
      arguments: >
        --ort_version 1.17.0
        --is_gpu True
      workingDirectory: '$(Build.SourcesDirectory)'
  - task: Bash@3
    displayName: 'Download CUDA'
    inputs:
      targetType: 'inline'
      script: |
        azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v$(cuda_version)" ${{ env.cuda_dir}}


  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: $(MsbuildPlatform)
      configuration: $(BuildConfig)
      msbuildArchitecture: $(buildArch)
      maximumCpuCount: true
      logProjectEvents: true
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  # Esrp signing
  - template: win-esrp-dll.yml
    parameters:
      FolderPath: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)\onnxruntime\capi'
      DisplayName: 'ESRP - Sign Native dlls'
      DoEsrp: true
      Pattern: '*.pyd,*.dll'

  - task: PythonScript@0
    displayName: 'Build wheel'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\setup.py'
      arguments: 'bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)'
      workingDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)\dist'
      Contents: '*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime

  - script: |
      7z x *.whl
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: 'unzip the package'

  - task: CredScan@3
    displayName: 'Run CredScan'
    inputs:
      debugMode: false
    continueOnError: true

  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '+:file|$(Build.ArtifactStagingDirectory)\**\*.dll;-:file|$(Build.ArtifactStagingDirectory)\**\DirectML.dll'
    continueOnError: true

  - task: TSAUpload@2
    displayName: 'TSA upload'
    condition: and(and (succeeded(), and(eq(variables['buildArch'], 'x64'), eq(variables['PythonVersion'], '3.8'))), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    inputs:
      GdnPublishTsaOnboard: false
      GdnPublishTsaConfigFile: '$(Build.sourcesDirectory)\.gdn\.gdntsa'
    continueOnError: true

  - template: component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

#  - ${{ if eq(parameters.enable_windows_gpu, true) }}:
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-T4'
#          PYTHON_VERSION: '3.8'
#          EP_BUILD_FLAGS: --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_home="$(Agent.TempDirectory)\v11.8"  --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52;60;61;70;75;80"
#          ENV_SETUP_SCRIPT: setup_env_gpu.bat
#          EP_NAME: gpu
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-T4'
#          PYTHON_VERSION: '3.9'
#          EP_BUILD_FLAGS: --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_home="$(Agent.TempDirectory)\v11.8"  --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52;60;61;70;75;80"
#          ENV_SETUP_SCRIPT: setup_env_gpu.bat
#          EP_NAME: gpu
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-T4'
#          PYTHON_VERSION: '3.10'
#          EP_BUILD_FLAGS: --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_home="$(Agent.TempDirectory)\v11.8"  --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52;60;61;70;75;80"
#          ENV_SETUP_SCRIPT: setup_env_gpu.bat
#          EP_NAME: gpu
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-T4'
#          PYTHON_VERSION: '3.11'
#          EP_BUILD_FLAGS: --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_home="$(Agent.TempDirectory)\v11.8"  --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52;60;61;70;75;80"
#          ENV_SETUP_SCRIPT: setup_env_gpu.bat
#          EP_NAME: gpu
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-T4'
#          PYTHON_VERSION: '3.12'
#          EP_BUILD_FLAGS: --use_tensorrt --tensorrt_home="C:\local\TensorRT-8.6.1.6.Windows10.x86_64.cuda-11.8" --cuda_home="$(Agent.TempDirectory)\v11.8"  --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=52;60;61;70;75;80"
#          ENV_SETUP_SCRIPT: setup_env_gpu.bat
#          EP_NAME: gpu
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-dml-A10'
#          PYTHON_VERSION: '3.8'
#          EP_BUILD_FLAGS: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos
#          ENV_SETUP_SCRIPT: setup_env.bat
#          EP_NAME: directml
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-dml-A10'
#          PYTHON_VERSION: '3.9'
#          EP_BUILD_FLAGS: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos
#          ENV_SETUP_SCRIPT: setup_env.bat
#          EP_NAME: directml
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-dml-A10'
#          PYTHON_VERSION: '3.10'
#          EP_BUILD_FLAGS: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos
#          ENV_SETUP_SCRIPT: setup_env.bat
#          EP_NAME: directml
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-dml-A10'
#          PYTHON_VERSION: '3.11'
#          EP_BUILD_FLAGS: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos
#          ENV_SETUP_SCRIPT: setup_env.bat
#          EP_NAME: directml
#
#      - template: py-win-gpu.yml
#        parameters:
#          MACHINE_POOL: 'onnxruntime-Win2022-GPU-dml-A10'
#          PYTHON_VERSION: '3.12'
#          EP_BUILD_FLAGS: --use_dml --cmake_extra_defines CMAKE_SYSTEM_VERSION=10.0.18362.0 --enable_wcos
#          ENV_SETUP_SCRIPT: setup_env.bat
#          EP_NAME: directml
